/*plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.1"
}*/

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
    }
}

apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle.forge'

version = "${mc_version}-${mod_version}"
group = "${package_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}"

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
}

repositories {
    maven { url = "http://mobiusstrip.eu/maven" }
    maven { url = "http://chickenbones.net/maven/" }
}

dependencies {
    //runtime "mcp.mobius.waila:Waila:${waila_version}"
    compile "codechicken:CodeChickenLib:${mc_version}-${ccl_version}:dev"
    compile "codechicken:CodeChickenLib:${mc_version}-${ccl_version}:src"

    compile "codechicken:CodeChickenCore:${mc_version}-${ccc_version}:dev"
    compile "codechicken:CodeChickenCore:${mc_version}-${ccc_version}:src"

    compile "codechicken:NotEnoughItems:${mc_version}-${nei_version}:dev"
    compile "codechicken:NotEnoughItems:${mc_version}-${nei_version}:src"
}

// Adapted from AE2: https://github.com/AppliedEnergistics/Applied-Energistics-2
//task copyChicken(type: Copy, dependsOn: "extractUserdev") {
//    from { configurations.compile }
//    include "***//*Chicken*.jar", "***/NotEnoughItems*.jar"
//    exclude "*CodeChickenLib*" // because CCC downloads it anyway
//    into file(minecraft.runDir + "/mods")
//    mustRunAfter "recompileMc"
//}

//setupDecompWorkspace.finalizedBy copyChicken
//setupDevWorkspace.finalizedBy copyChicken

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


tasks.withType(ScalaCompile){
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task deobfSourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'deobfSources'
}

artifacts {
    archives deobfJar
    archives deobfSourceJar
}
