buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '1.7.2'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

final commitId

if (hasProperty("grgit")) { // If there's a valid Git repository, get the latest commit ID
    commitId = "${grgit.head().abbreviatedId}"
} else { // Else fall back to NOGIT
    commitId = "NOGIT"
}

version = "${mc_version}-${mod_version}-${commitId}"
group = "${package_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                testmod3 {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                testmod3 {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url = "http://dvs1.progwml6.com/files/maven" }
    maven { url = "http://tehnut.info/maven" }
    maven { url = 'https://jitpack.io' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

//    deobf "mezz.jei:jei_${mc_version}:${jei_version}:api"
//    runtime "mezz.jei:jei_${mc_version}:${jei_version}"
    compile "org.apache.httpcomponents:fluent-hc:${httpclient_version}"
//    deobf "mcp.mobius.waila:Hwyla:${hwyla_version}_${mc_version}"
//    deobfCompile "com.github.azanor:Baubles:${baubles_version}"
}

/*
// TODO: Replace shadow with contained deps
shadowJar {
    // Only shadow fluent-hc
    dependencies {
        include(dependency('org.apache.httpcomponents:fluent-hc:.*'))
    }

    // Relocate fluent-hc to prevent conflicts with other mods that include it
    relocate 'org.apache.http.client.fluent', 'choonster.testmod3.repack.org.apache.http.client.fluent'

    classifier '' // Replace the default JAR
}

reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}
*/

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:unchecked', '-Xlint:deprecation'])
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives javadocJar
//    archives shadowJar
}

jar {
    manifest {
        attributes([
                "Specification-Title": "Test Mod 3",
                "Specification-Vendor": "Choonster",
                "Specification-Version": "${mc_version}-${mod_version}",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Choonster",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}